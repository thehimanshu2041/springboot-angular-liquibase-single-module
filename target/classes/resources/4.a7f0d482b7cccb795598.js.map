{"version":3,"sources":["./node_modules/credit-card-type/index.js","./node_modules/credit-card-type/lib/find-best-match.js","./node_modules/credit-card-type/lib/matches.js","./node_modules/credit-card-type/lib/clone.js","./node_modules/credit-card-type/lib/card-types.js","./node_modules/credit-card-type/lib/is-valid-input-type.js","./node_modules/credit-card-type/lib/add-matching-cards-to-results.js"],"names":["testOrder","types","clone","findBestMatch","isValidInputType","addMatchingCardsToResults","customCards","cardNames","VISA","MASTERCARD","AMERICAN_EXPRESS","DINERS_CLUB","DISCOVER","JCB","UNIONPAY","MAESTRO","ELO","MIR","HIPER","HIPERCARD","ORIGINAL_TEST_ORDER","findType","type","getCardPosition","name","ignoreErrorForNotExisting","position","indexOf","Error","creditCardType","cardNumber","bestMatch","results","length","map","forEach","cardConfiguration","getTypeInfo","removeCard","splice","addCard","config","existingCardPosition","push","updateCard","cardType","updates","clonedCard","originalObject","Object","keys","key","changeOrder","currentPosition","resetModifications","module","exports","numberOfResultsWithMaxStrengthProperty","filter","result","matchStrength","hasEnoughResultsToDetermineBestMatch","reduce","pattern","Array","isArray","min","max","maxLengthToCheck","String","substr","integerRepresentationOfCardNumber","parseInt","matchesRange","substring","matchesPattern","JSON","parse","stringify","visa","niceType","patterns","gaps","lengths","code","size","mastercard","discover","jcb","unionpay","maestro","elo","mir","hiper","hipercard","matches","i","patternLength","clonedCardConfiguration"],"mappings":"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","file":"4.a7f0d482b7cccb795598.js","sourcesContent":["'use strict';\n\nvar types = require('./lib/card-types');\nvar clone = require('./lib/clone');\nvar findBestMatch = require('./lib/find-best-match');\nvar isValidInputType = require('./lib/is-valid-input-type');\nvar addMatchingCardsToResults = require('./lib/add-matching-cards-to-results');\n\nvar testOrder;\nvar customCards = {};\n\nvar cardNames = {\n  VISA: 'visa',\n  MASTERCARD: 'mastercard',\n  AMERICAN_EXPRESS: 'american-express',\n  DINERS_CLUB: 'diners-club',\n  DISCOVER: 'discover',\n  JCB: 'jcb',\n  UNIONPAY: 'unionpay',\n  MAESTRO: 'maestro',\n  ELO: 'elo',\n  MIR: 'mir',\n  HIPER: 'hiper',\n  HIPERCARD: 'hipercard'\n};\n\nvar ORIGINAL_TEST_ORDER = [\n  cardNames.VISA,\n  cardNames.MASTERCARD,\n  cardNames.AMERICAN_EXPRESS,\n  cardNames.DINERS_CLUB,\n  cardNames.DISCOVER,\n  cardNames.JCB,\n  cardNames.UNIONPAY,\n  cardNames.MAESTRO,\n  cardNames.ELO,\n  cardNames.MIR,\n  cardNames.HIPER,\n  cardNames.HIPERCARD\n];\n\ntestOrder = clone(ORIGINAL_TEST_ORDER);\n\nfunction findType(type) {\n  return customCards[type] || types[type];\n}\n\nfunction getAllCardTypes() {\n  return testOrder.map(function (type) {\n    return clone(findType(type));\n  });\n}\n\nfunction getCardPosition(name, ignoreErrorForNotExisting) {\n  var position = testOrder.indexOf(name);\n\n  if (!ignoreErrorForNotExisting && position === -1) {\n    throw new Error('\"' + name + '\" is not a supported card type.');\n  }\n\n  return position;\n}\n\nfunction creditCardType(cardNumber) {\n  var bestMatch;\n  var results = [];\n\n  if (!isValidInputType(cardNumber)) {\n    return [];\n  }\n\n  if (cardNumber.length === 0) {\n    return getAllCardTypes(testOrder);\n  }\n\n  testOrder.forEach(function (type) {\n    var cardConfiguration = findType(type);\n\n    addMatchingCardsToResults(cardNumber, cardConfiguration, results);\n  });\n\n  bestMatch = findBestMatch(results);\n\n  if (bestMatch) {\n    return [bestMatch];\n  }\n\n  return results;\n}\n\ncreditCardType.getTypeInfo = function (type) {\n  return clone(findType(type));\n};\n\ncreditCardType.removeCard = function (name) {\n  var position = getCardPosition(name);\n\n  testOrder.splice(position, 1);\n};\n\ncreditCardType.addCard = function (config) {\n  var existingCardPosition = getCardPosition(config.type, true);\n\n  customCards[config.type] = config;\n\n  if (existingCardPosition === -1) {\n    testOrder.push(config.type);\n  }\n};\n\ncreditCardType.updateCard = function (cardType, updates) {\n  var clonedCard;\n  var originalObject = customCards[cardType] || types[cardType];\n\n  if (!originalObject) {\n    throw new Error('\"' + cardType + '\" is not a recognized type. Use `addCard` instead.');\n  }\n\n  if (updates.type && originalObject.type !== updates.type) {\n    throw new Error('Cannot overwrite type parameter.');\n  }\n\n  clonedCard = clone(originalObject, true);\n\n  Object.keys(clonedCard).forEach(function (key) {\n    if (updates[key]) {\n      clonedCard[key] = updates[key];\n    }\n  });\n\n  customCards[clonedCard.type] = clonedCard;\n};\n\ncreditCardType.changeOrder = function (name, position) {\n  var currentPosition = getCardPosition(name);\n\n  testOrder.splice(currentPosition, 1);\n  testOrder.splice(position, 0, name);\n};\n\ncreditCardType.resetModifications = function () {\n  testOrder = clone(ORIGINAL_TEST_ORDER);\n  customCards = {};\n};\n\ncreditCardType.types = cardNames;\n\nmodule.exports = creditCardType;\n","'use strict';\n\nfunction hasEnoughResultsToDetermineBestMatch(results) {\n  var numberOfResultsWithMaxStrengthProperty = results.filter(function (result) {\n    return result.matchStrength;\n  }).length;\n\n  // if all possible results have a maxStrength property\n  // that means the card number is sufficiently long\n  // enough to determine conclusively what the type is\n  return numberOfResultsWithMaxStrengthProperty > 0 &&\n    numberOfResultsWithMaxStrengthProperty === results.length;\n}\n\nfunction findBestMatch(results) {\n  if (!hasEnoughResultsToDetermineBestMatch(results)) {\n    return;\n  }\n\n  return results.reduce(function (bestMatch, result) { // eslint-disable-line consistent-return\n    if (!bestMatch) {\n      return result;\n    }\n\n    // if the current best match pattern is less specific\n    // than this result, set the result as the new best match\n    if (bestMatch.matchStrength < result.matchStrength) {\n      return result;\n    }\n\n    return bestMatch;\n  });\n}\n\nmodule.exports = findBestMatch;\n","'use strict';\n\n// Adapted from https://github.com/polvo-labs/card-type/blob/aaab11f80fa1939bccc8f24905a06ae3cd864356/src/cardType.js#L37-L42\nfunction matchesRange(cardNumber, min, max) {\n  var maxLengthToCheck = String(min).length;\n  var substr = cardNumber.substr(0, maxLengthToCheck);\n  var integerRepresentationOfCardNumber = parseInt(substr, 10);\n\n  min = parseInt(String(min).substr(0, substr.length), 10);\n  max = parseInt(String(max).substr(0, substr.length), 10);\n\n  return integerRepresentationOfCardNumber >= min && integerRepresentationOfCardNumber <= max;\n}\n\nfunction matchesPattern(cardNumber, pattern) {\n  pattern = String(pattern);\n\n  return pattern.substring(0, cardNumber.length) === cardNumber.substring(0, pattern.length);\n}\n\nfunction matches(cardNumber, pattern) {\n  if (Array.isArray(pattern)) {\n    return matchesRange(cardNumber, pattern[0], pattern[1]);\n  }\n\n  return matchesPattern(cardNumber, pattern);\n}\n\nmodule.exports = matches;\n","'use strict';\n\nfunction clone(originalObject) {\n  var dupe;\n\n  if (!originalObject) { return null; }\n\n  dupe = JSON.parse(JSON.stringify(originalObject));\n\n  return dupe;\n}\n\nmodule.exports = clone;\n","'use strict';\n\nvar cardTypes = {\n  visa: {\n    niceType: 'Visa',\n    type: 'visa',\n    patterns: [\n      4\n    ],\n    gaps: [4, 8, 12],\n    lengths: [16, 18, 19],\n    code: {\n      name: 'CVV',\n      size: 3\n    }\n  },\n  mastercard: {\n    niceType: 'Mastercard',\n    type: 'mastercard',\n    patterns: [\n      [51, 55],\n      [2221, 2229],\n      [223, 229],\n      [23, 26],\n      [270, 271],\n      2720\n    ],\n    gaps: [4, 8, 12],\n    lengths: [16],\n    code: {\n      name: 'CVC',\n      size: 3\n    }\n  },\n  'american-express': {\n    niceType: 'American Express',\n    type: 'american-express',\n    patterns: [\n      34,\n      37\n    ],\n    gaps: [4, 10],\n    lengths: [15],\n    code: {\n      name: 'CID',\n      size: 4\n    }\n  },\n  'diners-club': {\n    niceType: 'Diners Club',\n    type: 'diners-club',\n    patterns: [\n      [300, 305],\n      36,\n      38,\n      39\n    ],\n    gaps: [4, 10],\n    lengths: [14, 16, 19],\n    code: {\n      name: 'CVV',\n      size: 3\n    }\n  },\n  discover: {\n    niceType: 'Discover',\n    type: 'discover',\n    patterns: [\n      6011,\n      [644, 649],\n      65\n    ],\n    gaps: [4, 8, 12],\n    lengths: [16, 19],\n    code: {\n      name: 'CID',\n      size: 3\n    }\n  },\n  jcb: {\n    niceType: 'JCB',\n    type: 'jcb',\n    patterns: [\n      2131,\n      1800,\n      [3528, 3589]\n    ],\n    gaps: [4, 8, 12],\n    lengths: [16, 17, 18, 19],\n    code: {\n      name: 'CVV',\n      size: 3\n    }\n  },\n  unionpay: {\n    niceType: 'UnionPay',\n    type: 'unionpay',\n    patterns: [\n      620,\n      [624, 626],\n      [62100, 62182],\n      [62184, 62187],\n      [62185, 62197],\n      [62200, 62205],\n      [622010, 622999],\n      622018,\n      [622019, 622999],\n      [62207, 62209],\n      [622126, 622925],\n      [623, 626],\n      6270,\n      6272,\n      6276,\n      [627700, 627779],\n      [627781, 627799],\n      [6282, 6289],\n      6291,\n      6292,\n      810,\n      [8110, 8131],\n      [8132, 8151],\n      [8152, 8163],\n      [8164, 8171]\n    ],\n    gaps: [4, 8, 12],\n    lengths: [14, 15, 16, 17, 18, 19],\n    code: {\n      name: 'CVN',\n      size: 3\n    }\n  },\n  maestro: {\n    niceType: 'Maestro',\n    type: 'maestro',\n    patterns: [\n      493698,\n      [500000, 506698],\n      [506779, 508999],\n      [56, 59],\n      63,\n      67,\n      6\n    ],\n    gaps: [4, 8, 12],\n    lengths: [12, 13, 14, 15, 16, 17, 18, 19],\n    code: {\n      name: 'CVC',\n      size: 3\n    }\n  },\n  elo: {\n    niceType: 'Elo',\n    type: 'elo',\n    patterns: [\n      401178,\n      401179,\n      438935,\n      457631,\n      457632,\n      431274,\n      451416,\n      457393,\n      504175,\n      [506699, 506778],\n      [509000, 509999],\n      627780,\n      636297,\n      636368,\n      [650031, 650033],\n      [650035, 650051],\n      [650405, 650439],\n      [650485, 650538],\n      [650541, 650598],\n      [650700, 650718],\n      [650720, 650727],\n      [650901, 650978],\n      [651652, 651679],\n      [655000, 655019],\n      [655021, 655058]\n    ],\n    gaps: [4, 8, 12],\n    lengths: [16],\n    code: {\n      name: 'CVE',\n      size: 3\n    }\n  },\n  mir: {\n    niceType: 'Mir',\n    type: 'mir',\n    patterns: [\n      [2200, 2204]\n    ],\n    gaps: [4, 8, 12],\n    lengths: [16, 17, 18, 19],\n    code: {\n      name: 'CVP2',\n      size: 3\n    }\n  },\n  hiper: {\n    niceType: 'Hiper',\n    type: 'hiper',\n    patterns: [\n      637095,\n      637568,\n      637599,\n      637609,\n      637612\n    ],\n    gaps: [4, 8, 12],\n    lengths: [16],\n    code: {\n      name: 'CVC',\n      size: 3\n    }\n  },\n  hipercard: {\n    niceType: 'Hipercard',\n    type: 'hipercard',\n    patterns: [\n      606282\n    ],\n    gaps: [4, 8, 12],\n    lengths: [16],\n    code: {\n      name: 'CVC',\n      size: 3\n    }\n  }\n};\n\nmodule.exports = cardTypes;\n","'use strict';\n\nfunction isValidInputType(cardNumber) {\n  return typeof cardNumber === 'string' || cardNumber instanceof String;\n}\n\nmodule.exports = isValidInputType;\n","'use strict';\n\nvar clone = require('./clone');\nvar matches = require('./matches');\n\nfunction addMatchingCardsToResults(cardNumber, cardConfiguration, results) {\n  var i, pattern, patternLength, clonedCardConfiguration;\n\n  for (i = 0; i < cardConfiguration.patterns.length; i++) {\n    pattern = cardConfiguration.patterns[i];\n\n    if (!matches(cardNumber, pattern)) {\n      continue;\n    }\n\n    clonedCardConfiguration = clone(cardConfiguration);\n\n    if (Array.isArray(pattern)) {\n      patternLength = String(pattern[0]).length;\n    } else {\n      patternLength = String(pattern).length;\n    }\n\n    if (cardNumber.length >= patternLength) {\n      clonedCardConfiguration.matchStrength = patternLength;\n    }\n\n    results.push(clonedCardConfiguration);\n    break;\n  }\n}\n\nmodule.exports = addMatchingCardsToResults;\n"],"sourceRoot":"webpack:///"}